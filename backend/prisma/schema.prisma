generator client {
  provider = "prisma-client-js"
  // output   = "../src/generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model article_likes {
  user_id    BigInt   @db.UnsignedBigInt
  article_id BigInt   @db.UnsignedBigInt
  created_at DateTime @default(now()) @db.Timestamp(0)
  articles   articles @relation(fields: [article_id], references: [id], onDelete: Cascade, map: "fk_likes_article")
  users      users    @relation(fields: [user_id], references: [id], onDelete: Cascade, map: "fk_likes_user")

  @@id([user_id, article_id])
  @@index([article_id], map: "fk_likes_article")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model articles {
  id            BigInt          @id @default(autoincrement()) @db.UnsignedBigInt
  user_id       BigInt          @db.UnsignedBigInt
  content       String          @db.Text
  status        Int             @default(0) @db.UnsignedTinyInt
  like_count    Int             @default(0) @db.UnsignedInt
  comment_count Int             @default(0) @db.UnsignedInt
  published_at  DateTime?       @db.Timestamp(0)
  created_at    DateTime        @default(now()) @db.Timestamp(0)
  updated_at    DateTime        @default(now()) @db.Timestamp(0)
  deleted_at    DateTime?       @db.Timestamp(0)
  article_likes article_likes[]
  users         users           @relation(fields: [user_id], references: [id], onDelete: Cascade, map: "fk_articles_user")
  comments      comments[]

  @@index([status, published_at], map: "idx_status_published")
  @@index([user_id], map: "idx_user_id")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model comments {
  id             BigInt     @id @default(autoincrement()) @db.UnsignedBigInt
  article_id     BigInt     @db.UnsignedBigInt
  user_id        BigInt     @db.UnsignedBigInt
  parent_id      BigInt?    @db.UnsignedBigInt
  content        String     @db.Text
  created_at     DateTime   @default(now()) @db.Timestamp(0)
  updated_at     DateTime   @default(now()) @db.Timestamp(0)
  deleted_at     DateTime?  @db.Timestamp(0)
  articles       articles   @relation(fields: [article_id], references: [id], onDelete: Cascade, map: "fk_comments_article")
  comments       comments?  @relation("commentsTocomments", fields: [parent_id], references: [id], onDelete: Cascade, map: "fk_comments_parent")
  other_comments comments[] @relation("commentsTocomments")
  users          users      @relation(fields: [user_id], references: [id], onDelete: Cascade, map: "fk_comments_user")

  @@index([article_id], map: "idx_article_id")
  @@index([parent_id], map: "idx_parent_id")
  @@index([user_id], map: "idx_user_id")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model logs {
  id          BigInt   @id @default(autoincrement()) @db.UnsignedBigInt
  user_id     BigInt?  @db.UnsignedBigInt
  action      String   @db.VarChar(50)
  target_type String?  @db.VarChar(50)
  target_id   BigInt?  @db.UnsignedBigInt
  details     Json?
  ip_address  String?  @db.VarChar(45)
  user_agent  String?  @db.Text
  status      String   @default("SUCCESS") @db.VarChar(20)
  created_at  DateTime @default(now()) @db.Timestamp(0)
  users       users?   @relation(fields: [user_id], references: [id], onDelete: NoAction, map: "fk_logs_user")

  @@index([action], map: "idx_action")
  @@index([created_at], map: "idx_created_at")
  @@index([target_type, target_id], map: "idx_target")
  @@index([user_id], map: "idx_user_id")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model users {
  id                BigInt          @id @default(autoincrement()) @db.UnsignedBigInt
  username          String          @unique(map: "uk_username") @db.VarChar(30)
  password          String          @db.VarChar(255)
  nickname          String?         @db.VarChar(50)
  brief             String?         @db.VarChar(255)
  role              Int             @default(0) @db.UnsignedTinyInt
  status            Int             @default(0) @db.UnsignedTinyInt
  email             String?         @unique(map: "uk_email") @db.VarChar(120)
  header_background String?         @db.VarChar(255)
  avatar            String?         @db.VarChar(255)
  created_at        DateTime        @default(now()) @db.Timestamp(0)
  updated_at        DateTime        @default(now()) @db.Timestamp(0)
  deleted_at        DateTime?       @db.Timestamp(0)
  article_likes     article_likes[]
  articles          articles[]
  comments          comments[]
  logs              logs[]

  @@index([status], map: "idx_status")
}
